
//
// Documentation is coming.
// Requires GetWord2() and CountWords2(): http://www.cbrepository.com/codes/code/11/
//


//
// DEFINITIONS
//

Global CountCommandLineArgumentsDefined
Global CountCommandLineArgumentsPresent

Type CommandLineArgument
	Field id // Result of ConvertToInteger()
	Field long_name$ // Multicharacter name. Optional If short_name$ is defined.
	Field short_name$ // Single character name. Optional If long_name$ is defined.
	Field requires_value // 1 Or 0 depending ON If this argument requires a value After it. Values cannot be optional. If an argument can take a value, a value must be present every Time the argument name is present.
	Field value$ // Empty If has_value is 0.
	Field present // 0: Argument Not found in CommandLine(). 1: Argument was found.
EndType

Global CountCommandLineNamelessArgumentsPresent

Type CommandLineNamelessArgument
	Field value$
EndType


//
// PUBLIC FUNCTIONS
//

//**
// Defines named commandline arguments. Nameless arguments are not predefined, they can be accessed
//
// @param string arguments Denotes all possible named arguments in a format like this: "--argument --another-argument --argument-with-shortcut-letter:a --argument-requiring-value+ -b" The last argument "-b" is an example of an argument that does not have a long name alias.
// @return bool True if parsing arguments succeeded, false if some argument did not begin with "--" or "-" or if you defined "-" or "--" without a trailing argument name.
//*
Function DefineCommandLineArguments(arguments$)
	Dim i, count_arguments, argument$, has_value, long_name$, short_name$
	
	ResetCommandLineArguments()
	count_arguments = CountWords2(arguments, " ")
	For i = 1 To count_arguments
		argument = GetWord2(arguments, i, " ")

		// Determine If the argument should have a value
		has_value = 0
		If Right(argument, 1) = "+" Then
			has_value = True
			argument = Left(argument, Len(argument)-1) // Remove the +
		EndIf
		
		// Determine the argument's name
		short_name = ""
		long_name = ""
		If "--" = Left(argument, 2) Then
			// Argument has a long name
			// Check If it has a Short alternative too
			If InStr(argument, ":") Then
				// Both long And Short names are defined
				long_name = GetWord2(argument, 1, ":")
				short_name = GetWord2(argument, 2, ":")
				If "-" <> Left(short_name, 1) Then short_name = "-" + short_name // Deinition can be either "--argument-name:a" Or "--argument-name:-a".
			Else
				// Only a long name is defined
				long_name = argument
			EndIf
			If long_name = "--" Then Return False // Name cannot be empty, it needs letters too.
		ElseIf "-" = Left(argument, 1) Then
			// The argument has only a Short name
			short_name = argument
			If short_name = "-" Then Return False // Name cannot be empty, it needs letters too.
		Else
			// If the argument name does Not begin with "--" Or "-", The arguments String is malformed.
			Return False
		EndIf
		
		// Define the argument
		NewCommandLineArgument(long_name, short_name, has_value)
	Next i
	
	Return True
EndFunction

//**
// @param string command_line If blank (default), will get value from CommandLine(). This offers a substitute for CommandLine() if you want to do some testing or override arguments.
// @return bool True if all given arguments exist in predefined (named) arguments. False if there was an argument that is not predefined. Exception: arguments without a name cannot be predefined and they are always accepted (they are collected to CommandLineNamelessArgument type list)
//*
Function ParseCommandLineArguments(command_line$="")
	Dim argument_name$, argument_value$, old_character$, character$, quote_open, collect_value, end_of_arguments, i
	Dim argument.CommandLineArgument

	ResetCommandLineArguments(False) // False: do Not reset the definitons, but reset values And 'present' flags.
	ResetCommandLineNamelessArguments()
	If "" = command_line Then command_line = CommandLine()
	command_line = Trim(command_line)
	If "" = command_line Then Return True // Nothing To parse, all good.
	
	command_line = Replace(command_line, "\\", Chr(1))
    command_line = Replace(command_line, "\"+chr(34), Chr(2))
    old_character = " "
    quote_open = False
	collect_value = False
	end_of_arguments = False
    For i = 1 To Len(command_line) + 1 // +1 so that we can detect end_of_arguments
		If i <= Len(command_line) Then
			character$ = Mid(command_line,i,1)
		Else
			character = ""
			end_of_arguments = True
		EndIf
        If character=Chr(34) Then
            quote_open = Not quote_open
        ElseIf (character=" " And False=quote_open And old_character <> " ") Or end_of_arguments Then
			// An argument name Or a value is complete. Next argument begins (Or a value To the current argument begins)
            If collect_value Then
				// We were collecting a value For an argument that was defined in the previous "word".
				// In this Case, argument should be defined, so I'm just assuming it's Not NULL. TODO: Maybe add a check For this?
				argument\value = ParseCommandLineArguments_Unescape(argument_value)
				collect_value = False
				argument = NULL // We are done handling this argument
			Else
				// We were collecting an argument name (Or a nameless argument value).
				argument_name = ParseCommandLineArguments_Unescape(argument_name) // Argument names should Not contain quotes ("), but do the unescaping just in Case If the name happened To have quotes.
				If "-" = Left(argument_name, 1) Then
					// The name is either a long argument name (e.g. "--argument") Or a Short one (e.g. "-a")
					argument = getCommandLineArgument(argument_name) // This Function can handle both Short And long names.
					If NULL = argument Then Return False // Argument with that name was Not found. TODO: Maybe develop a more sensitive way To handle these Errors.
					argument\present = True
					CountCommandLineArgumentsPresent + 1
					
					// Check If the argument requires a value with it
					If argument\requires_value Then collect_value = True
				Else
					// Exception: this is Not actually an argument name - it's a value instead, For a nameless argument.
					NewCommandLineNamelessArgument(argument_name)
				EndIf
				argument_name = "" // Reset so that the Next argument name does Not begin with previous argument name.
			EndIf
        Else
			// Collect the character
			If collect_value Then
				// We are collecting a value For an argument that was defined in the previous "word".
				argument_value + character
			Else
				// We are collecting an argument name.
				argument_name + character
			EndIf
        EndIf
        old_character = character
    Next i
	Return True
EndFunction

Function GetCommandLineArgumentValue(argument_name$, if_not_present$="")
	Dim argument.CommandLineArgument
	argument = getCommandLineArgument(argument_name$)
	If NULL = argument Then Return if_not_present // This can only happen If the programmer has Not defined the argument they want To look For. Should Not happen, but must check. Can be a typo etc.
	If Not argument\present Then Return if_not_present // This argument\present is the flag that really tells, If the program was executed with this argument present Or Not.
	Return argument\value
EndFunction

Function isCommandLineArgumentPresent(argument_name$)
	Dim argument.CommandLineArgument
	argument = getCommandLineArgument(argument_name$)
	If NULL = argument Then Return False // It's Not even defined by the programmer. Probably there's a typo somewhere.
	Return argument\present // This argument\present is the flag that really tells, If the program was executed with this argument present Or Not.
EndFunction

Function NewCommandLineArgument(long_name$, short_name$, requires_value)
	Dim argument.CommandLineArgument
	
	CountCommandLineArgumentsDefined + 1
	argument = New(CommandLineArgument)
	argument\id = ConvertToInteger(argument)
	argument\long_name = long_name
	argument\short_name = short_name
	argument\requires_value = requires_value
EndFunction



//
// PRIVATE FUNCTIONS
//

Function ParseCommandLineArguments_Escape(stri$)
	stri = Replace(stri, "\\", Chr(1))
	stri = Replace(stri, "\"+chr(34), Chr(2))
	Return stri
EndFunction

Function ParseCommandLineArguments_Unescape(stri$)
	stri = Replace(stri, Chr(1), "\")
	stri = Replace(stri, Chr(2), Chr(34))
	Return stri
EndFunction

Function ResetCommandLineArguments(hard=1)
	Dim argument.CommandLineArgument
	
	For argument = Each CommandLineArgument
		If hard Then
			Delete argument
		Else
			argument\value = ""
			argument\present = False
		EndIf
	Next argument
	If hard Then CountCommandLineArgumentsDefined = 0
	CountCommandLineArgumentsPresent = 0
EndFunction

Function ResetCommandLineNamelessArguments()
	Dim nameless_argument.CommandLineNamelessArgument
	
	For nameless_argument = Each CommandLineNamelessArgument
		Delete nameless_argument
	Next nameless_argument
	CountCommandLineNamelessArgumentsPresent = 0
EndFunction

Function NewCommandLineNamelessArgument(value$)
	Dim nameless_argument.CommandLineNamelessArgument
	
	CountCommandLineNamelessArgumentsPresent + 1
	nameless_argument = New(CommandLineNamelessArgument)
	nameless_argument\value = value
EndFunction

Function getCommandLineArgument(name$)
	Dim argument.CommandLineArgument
	
	name = Lower(name)
	For argument = Each CommandLineArgument
		If "--" = Left(name, 2) Then
			// Look For the long name
			If argument\long_name = name Then Return argument\id
		Else
			// Look For the Short name
			If argument\short_name = name Then Return argument\id
		EndIf
	Next argument
	Return False
EndFunction


//
// Documentation is coming.
// Requires GetWord2() and CountWords2(): http://www.cbrepository.com/codes/code/11/
//


//
// DEFINITIONS
//

Global CountCommandLineOptionsDefined
Global CountCommandLineOptionsPresent

Type CommandLineOption
	Field id // Result of ConvertToInteger()
	Field long_name$ // Multicharacter name. Optional If short_name$ is defined.
	Field short_name$ // Single character name. Optional If long_name$ is defined.
	Field requires_argument // 1 Or 0 depending ON If this option requires an argument After it. Arguments cannot be optional. If an option can take an argument, an argument must be present every Time the option is present.
	Field argument$ // Empty If requires_argument is 0.
	Field present // 0: Option Not found in CommandLine(). 1: Option was found.
EndType

Global CommandLineAcceptNonOptionArguments // Defaults to false
Global CountCommandLineNonOptionArgumentsPresent

Type CommandLineNonOptionArgument
	Field argument$
EndType


//
// PUBLIC FUNCTIONS
//

//**
// Defines commandline options (an 'option' has a name and may have an 'argument', i.e. value). Non-option arguments are not predefined, they can be accessed currently only via the CommandLineNonOptionArgument type list (@see https://github.com/Taitava/cb-CommandLineArguments/issues/6).
//
// @param string arguments Denotes all possible named arguments in a format like this: "--option --another-option --option-with-shortcut-letter:a --option-requiring-argument+ -b" The last option "-b" is an example of an option that does not have a long name alias. If you put * as the _last_ word, non-option arguments will be accepted, otherwise not.
// @return bool True if parsing options succeeded, false if some option did not begin with "--" or "-" or if you defined "-" or "--" without a trailing option name.
//*
Function DefineCommandLineOptions(options$)
	Dim i, count_options, option$, requires_argument, long_name$, short_name$
	
	ResetCommandLineOptions()
	CommandLineAcceptNonOptionArguments = False
	count_options = CountWords2(options, " ")
	For i = 1 To count_options
		option = GetWord2(options, i, " ")
		
		// Check If the _last_ option is "+" without anything Else in it.
		If "*" = option And i = count_options Then
			// This "*" as the Last option denotes that non-option arguments are allowed.
			CommandLineAcceptNonOptionArguments = True
		EndIf

		// Determine If the option should have an argument
		requires_argument = 0
		If Right(option, 1) = "+" Then
			requires_argument = True
			option = Left(option, Len(option)-1) // Remove the +
		EndIf
		
		// Determine the argument's name
		short_name = ""
		long_name = ""
		If "--" = Left(option, 2) Then
			// Option has a long name
			// Check If it has a Short alternative too
			If InStr(option, ":") Then
				// Both long And Short names are defined
				long_name = GetWord2(option, 1, ":")
				short_name = GetWord2(option, 2, ":")
				If "-" <> Left(short_name, 1) Then short_name = "-" + short_name // Definition can be either "--option-name:a" Or "--option-name:-a".
			Else
				// Only a long name is defined
				long_name = option
			EndIf
			If long_name = "--" Then Return False // Name cannot be empty, it needs letters too.
		ElseIf "-" = Left(option, 1) Then
			// The argument has only a Short name
			short_name = option
			If short_name = "-" Then Return False // Name cannot be empty, it needs letters too.
		Else
			// If the argument name does Not begin with "--" Or "-", The arguments String is malformed.
			Return False
		EndIf
		
		// Define the argument
		NewCommandLineOption(long_name, short_name, requires_argument)
	Next i
	
	Return True
EndFunction

//**
// @param string command_line If blank (default), will get value from CommandLine(). This offers a substitute for CommandLine() if you want to do some testing or override arguments.
// @return bool True if all given options exist in predefined options. False if there was an option that is not predefined. Note: non-option arguments cannot be predefined and they are accepted if CommandLineAcceptNonOptionArguments is true. (they are collected to CommandLineNonOptionArgument type list)
//*
Function ParseCommandLineOptions(command_line$="")
	Dim option_name$, option_argument$, old_character$, character$, quote_open, collect_argument, end_of_options, i, n, short_option_name$
	Dim option.CommandLineOption

	ResetCommandLineOptions(False) // False: do Not reset the definitons, but reset arguments And 'present' flags.
	ResetCommandLineNonOptionArguments()
	If "" = command_line Then command_line = CommandLine()
	command_line = Trim(command_line)
	If "" = command_line Then Return True // Nothing To parse, all good.
	
	command_line = Replace(command_line, "\\", Chr(1)) // TODO: Use ParseCommandLineOptions_Escape() instead. It will handle the below Line too.
    command_line = Replace(command_line, "\"+chr(34), Chr(2))
    old_character = " "
    quote_open = False
	collect_argument = False
	end_of_options = False
    For i = 1 To Len(command_line) + 1 // +1 so that we can detect end_of_options
		If i <= Len(command_line) Then
			character$ = Mid(command_line,i,1)
		Else
			character = ""
			end_of_options = True
		EndIf
        If character=Chr(34) Then
            quote_open = Not quote_open
        ElseIf (character=" " And False=quote_open And old_character <> " ") Or end_of_options Then
			// An option name Or an argument is complete. Next option begins (Or an argument To the current option begins)
            If collect_argument Then
				// We were collecting an argument For an option that was defined in the previous "word".
				// In this Case, option should be defined, so I'm just assuming it's Not NULL. TODO: Maybe add a check For this?
				option\argument = ParseCommandLineOptions_Unescape(option_argument)
				collect_argument = False
				option = NULL // We are done handling this option
			Else
				// We were collecting an option name (Or a non-option argument).
				option_name = ParseCommandLineOptions_Unescape(option_name) // Option names should Not contain quotes ("), but do the unescaping just in Case If the name happened To have quotes.
				If "-" = Left(option_name, 1) Then
					// The name is either a long option name (e.g. "--option") Or a Short one (e.g. "-o")
					If "--" = Left(option_name, 2) Then
						// It's a long name, just a single option
						option = MarkCommandLineOptionPresent(option_name)
						If NULL = option Then Return False // An option with that name was Not found. TODO: Maybe develop a more sensitive way To handle these Errors.
					Else
						// It's a Short name, And it can sometimes contain multiple option names joined together (e.g. "-abc", equivalent To "-a -b -c")
						For n = 2 To Len(option_name) // Start from 2 instead of 1 because we want To skip the preceding -
							short_option_name = "-" + Mid(option_name, n, 1)
							option = MarkCommandLineOptionPresent(short_option_name)
							If NULL = option Then Return False // An option with that name was Not found. TODO: Maybe develop a more sensitive way To handle these Errors.
						Next n
						// Note that the variable 'option' will be used also After the For loop! It's intentional that that we want To use the Last option that was encountered, but Not any options Before it.
						// This is so that we can assign a possible argument To the Last option.
					EndIf
					
					// Check If the (last) option requires an argument with it
					If option\requires_argument Then collect_argument = True
				Else
					// Exception: this is Not actually an option name - it's a non-option argument instead.
					If Not CommandLineAcceptNonOptionArguments Then Return False // Non-option arguments Not wanted
					NewCommandLineNonOptionArgument(option_name)
				EndIf
				option_name = "" // Reset so that the Next option name does Not begin with previous option name.
			EndIf
        Else
			// Collect the character
			If collect_argument Then
				// We are collecting an argument For an option that was defined in the previous "word".
				option_argument + character
			Else
				// We are collecting an argument name.
				option_name + character
			EndIf
        EndIf
        old_character = character
    Next i
	
	// Ensure that we are Not lacking an argument For a previous option
	If collect_argument Then
		// We were expecting To encouter an argument For an option, but apparently the CommandLine String has just ended. As arguments are mandatory, we cannot accept this.
		Return False
	EndIf

	Return True
EndFunction

Function getCommandLineArgument(option_name$, if_not_present$="")
	Dim option.CommandLineOption
	option = getCommandLineOption(option_name$)
	If NULL = option Then Return if_not_present // This can only happen If the programmer has Not defined the option they want To look For. Should Not happen, but must check. Can be a typo etc.
	If Not option\present Then Return if_not_present // This option\present is the flag that really tells, If the program was executed with this option present Or Not.
	Return option\argument
EndFunction

Function isCommandLineOptionPresent(option_name$)
	Dim option.CommandLineOption
	option = getCommandLineOption(option_name$)
	If NULL = option Then Return False // It's Not even defined by the programmer. Probably there's a typo somewhere.
	Return option\present // This option\present is the flag that really tells, If the program was executed with this option present Or Not.
EndFunction

Function NewCommandLineOption(long_name$, short_name$, requires_argument)
	Dim option.CommandLineOption
	
	CountCommandLineOptionsDefined + 1
	option = New(CommandLineOption)
	option\id = ConvertToInteger(option)
	option\long_name = long_name
	option\short_name = short_name
	option\requires_argument = requires_argument
EndFunction



//
// PRIVATE FUNCTIONS
//

Function ParseCommandLineOptions_Escape(stri$)
	stri = Replace(stri, "\\", Chr(1))
	stri = Replace(stri, "\"+chr(34), Chr(2))
	Return stri
EndFunction

Function ParseCommandLineOptions_Unescape(stri$)
	stri = Replace(stri, Chr(1), "\")
	stri = Replace(stri, Chr(2), Chr(34))
	Return stri
EndFunction

Function ResetCommandLineOptions(hard=1)
	Dim option.CommandLineOption
	
	For option = Each CommandLineOption
		If hard Then
			Delete option
		Else
			option\argument = ""
			option\present = False
		EndIf
	Next option
	If hard Then CountCommandLineOptionsDefined = 0
	CountCommandLineOptionsPresent = 0
EndFunction

Function ResetCommandLineNonOptionArguments()
	Dim nonoption_argument.CommandLineNonOptionArgument
	
	For nonoption_argument = Each CommandLineNonOptionArgument
		Delete nonoption_argument
	Next nonoption_argument
	CountCommandLineNonOptionArgumentsPresent = 0
EndFunction

Function NewCommandLineNonOptionArgument(argument$)
	Dim nonoption_argument.CommandLineNonOptionArgument
	
	CountCommandLineNonOptionArgumentsPresent + 1
	nonoption_argument = New(CommandLineNonOptionArgument)
	nonoption_argument\argument = argument
EndFunction

Function getCommandLineOption(name$)
	Dim option.CommandLineOption
	
	name = Lower(name)
	For option = Each CommandLineOption
		If "--" = Left(name, 2) Then
			// Look For the long name
			If option\long_name = name Then Return option\id
		Else
			// Look For the Short name
			If option\short_name = name Then Return option\id
		EndIf
	Next option
	Return False
EndFunction

Function MarkCommandLineOptionPresent(option_name$)
	Dim option.CommandLineOption
	option = getCommandLineOption(option_name)
	If NULL = option Then Return False // An option with that name was Not found.
	option\present = True
	CountCommandLineOptionsPresent + 1
	Return option\id
EndFunction

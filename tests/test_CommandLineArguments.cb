
// These tests can be run with cbUnit: https://github.com/Taitava/cbUnit

Include "CommandLineArguments.cb"

Const CBUNIT_FORCE_VARIABLE_DECLARATION = 1
Const CBUNIT_STOP_AT = "function" // If test_DefineCommandLineOptions() fails, do not call test_ParseCommandLineOptions().

Const valid_option_definition = "--valid-option:v+ -a -b+ -c --long-option-without-argument"
Const count_valid_options = 5 // How many options appear in the above constant.
Global valid_option_definition_quoted$ : valid_option_definition_quoted = Chr(34) + valid_option_definition + Chr(34)


//**
// This function is called every time before calling any of the test_*() functions.
//*
Function hook_SetupTest(function_name$)
	If function_name <> "test_DefineCommandLineOptions" Then // No need To do this For test_DefineCommandLineOptions()
		DefineCommandLineOptions(valid_option_definition) // Actually we should already have a definition like this, but do it just in Case test_DefineCommandLineOptions() was Not called For some reason.
	EndIf
EndFunction

Function test_DefineCommandLineOptions()
	
	// These definitions should _Not_ work:
	assertNot(DefineCommandLineOptions("option-without-dashes-at-the-beginning"), "DefineCommandLineOptions() should n"+"ot accept options that do n"+"ot begin with --")
	assertNot(DefineCommandLineOptions("--valid-option option-without-dashes-at-the-beginning"), "DefineCommandLineOptions() should n"+"ot accept options that do n"+"ot begin with --")
	assertNot(DefineCommandLineOptions("--"), "DefineCommandLineOptions() should n"+"ot accept options that do n"+"ot have a name After --")
	assertNot(DefineCommandLineOptions("--valid-option --"), "DefineCommandLineOptions() should n"+"ot accept options that do n"+"ot have a name After --")
	
	// These definitions _should_ work:
	If assert(DefineCommandLineOptions(valid_option_definition), "DefineCommandLineOptions() should understand "+valid_option_definition_quoted) Then
		assertEquals(CountCommandLineOptionsDefined, count_valid_options, "DefineCommandLineOptions() defined a$ options, but it should define b$ options fo"+"r "+valid_option_definition_quoted)
	EndIf
	
EndFunction

Function test_ParseCommandLineOptions()
	
	// These options should fail:
	assertNot(ParseCommandLineOptions("--undefined-option"), "ParseCommandLineOptions() should n"+"ot accept undefined option names.")
	assertNot(ParseCommandLineOptions("-u"), "ParseCommandLineOptions() should n"+"ot accept undefined option names.")
	assertNot(ParseCommandLineOptions("-v"), "Option -v is defined to have an argument associated with it. ParseCommandLineOptions() should n"+"ot accept a CommandLine with -v without an argument.")
	assertNot(ParseCommandLineOptions("invalid-argument"), "ParseCommandLineOptions() should n"+"ot accept non-option arguments because DefineCommandLineOptions() was Not called with a definition String ending with a *")
	assertNot(ParseCommandLineOptions("-v valid-argument invalid-argument"), "ParseCommandLineOptions() should n"+"ot accept non-option arguments because DefineCommandLineOptions() was Not called with a definition String ending with a *")
	
	// Change so that non-option arguments will be allowed
	CommandLineAcceptNonOptionArguments = True
	
	// These options should be ok:
	assert(ParseCommandLineOptions("nonoption-argument"), "ParseCommandLineOptions() should accept non-option arguments because it's now enabled.")
	assertEquals(CountCommandLineNonOptionArgumentsPresent, 1, "We should have one non-option argument.")
	assert(ParseCommandLineOptions("-v valid-argument nonoption-argument"), "ParseCommandLineOptions() should accept non-option arguments because it's now enabled.")
	assertEquals(CountCommandLineNonOptionArgumentsPresent, 1, "We should have one non-option argument.")
	
	// Check quotes And backslash
	assert(ParseCommandLineOptions("-v "+Chr(34)+"argument in quotes"+Chr(34)), "ParseCommandLineOptions() should be able To handle arguments with spaces enclosed in quotes.")
	assertEquals(getCommandLineArgument("-v"), "argument in quotes") // Note: No quotes around the argument!
	assert(ParseCommandLineOptions("-v argument-with\"+Chr(34)+"quote-in-it"), "ParseCommandLineOptions() should be able To handle arguments with escaped quotes.")
	assertEquals(getCommandLineArgument("-v"), "argument-with"+Chr(34)+"quote-in-it") // Note: one quote in the middle, but no \
	assert(ParseCommandLineOptions("-v argument\\with\\backslashes"), "ParseCommandLineOptions() should be able To handle arguments with escaped backslashes.")
	assertEquals(getCommandLineArgument("-v"), "argument\with\backslashes")
	
	// Check joinin multiple Short options together
	assert(ParseCommandLineOptions("-ac"), "ParseCommandLineOptions() should be able To handle multiple joined short options, e.g. -ac")
	assert(isCommandLineOptionPresent("-a"), "CommandLine option -a should be present.")
	assert(isCommandLineOptionPresent("-c"), "CommandLine option -c should be present.")
	assert(ParseCommandLineOptions("-acv test"), "ParseCommandLineOptions() should be able To handle multiple joined short options with the Last one having an argument, e.g. -acv")
	assert(isCommandLineOptionPresent("-a"), "CommandLine option -a should be present.")
	assert(isCommandLineOptionPresent("-c"), "CommandLine option -c should be present.")
	assert(isCommandLineOptionPresent("-v"), "CommandLine option -v should be present.")
	assertEquals(getCommandLineArgument("-v", "Not-found"), "test", "CommandLine option should have an argument 'test', but the argument is b$ instead.")
EndFunction

Function test_getCommandLineArgument()
	// getCommandLineArgument() is actually already tested by test_ParseCommandLineOptions(), but here are some extensive assertions.
	
	// First define that our program has been called with the option "-v argument".
	ParseCommandLineOptions("-v argument")
	
	// Test that we get the same argument with both Short And long option name
	assertEquals(getCommandLineArgument("--valid-option"), "argument", "getCommandLineArgument() should Return 'argument' For --valid-option. Returned a$ instead.")
	assertEquals(getCommandLineArgument("-v"), "argument", "getCommandLineArgument() should Return 'argument' For -v.")
	
	// Test the we get the Default argument If an option is Not present Or defined
	assertEquals(getCommandLineArgument("-b", "Default"), "Default", "getCommandLineArgument() should Return 'Default' because -b is Not present.")
	assertEquals(getCommandLineArgument("--undefined-option", "Default"), "Default", "getCommandLineArgument() should Return 'Default' because --undefined-option is Not even defined.")
	
EndFunction

Function test_isCommandLineOptionPresent()
	// isCommandLineOptionPresent() is actually already tested by test_ParseCommandLineOptions(), but here are some extensive assertions.
	
	// First define that our program has been called with the option "-v argument".
	ParseCommandLineOptions("-v argument")
	
	// These options should be present:
	assert(isCommandLineOptionPresent("-v"), "isCommandLineOptionPresent() should notice that -v is present.")
	assert(isCommandLineOptionPresent("--valid-option"), "isCommandLineOptionPresent() should notice that --valid-option is present.")
	
	// These options should Not be present:
	assertNot(isCommandLineOptionPresent("--non-existing-option"), "isCommandLineOptionPresent() should notice that --non-existing-option is not present.")
	assertNot(isCommandLineOptionPresent("-a"), "isCommandLineOptionPresent() should notice that -a is not present.")
	assertNot(isCommandLineOptionPresent("-b"), "isCommandLineOptionPresent() should notice that -b is not present.")
EndFunction


//
// TODO: Add tests for the rest of the functions in CommandLineArguments.cb, both public and internal ones.
//




//
// GetWord2() and CountWords2()
// These are copied here because they are not included in CommandLineArguments.cb but CommandLineArguments needs these during testing.
//

// Copied 2021-02-12 from http://www.cbrepository.com/codes/code/11/
// Created 2011-04-09 by KilledWhale
// Modifications:
//  - added $ to the GetWord2() function name. No other modifications
//  - Made the function FVD compatible
Function GetWord2$(a As String, b As Integer, c As String)
   Dim l, i, q // Force Variable Declaration
   
   l = Len(c) // Otetaan pituus muuttujaan optimoinniksi
	For i As Integer = 2 To b // Käydään läpi kaikki ei-halutut sanat
	  q = InStr(a, c) // Katsotaan löytyykö erotinta
		If q Then // Löytyi
			a = Mid(a, q + l) // Otetaan alkuosa pois erottimeen asti
	  EndIf
	Next i

   q = InStr(a, c) // Katsotaan vielä löytyykö erotinta
	If q Then // Jos löytyi
		Return Mid(a, 1, q - 1) // Palautetaan tekstiä seuraavaan erottimeen asti
	Else // Ei löytynyt
		Return Mid(a, 1) // Palautetaan loppuosa
	EndIf
EndFunction

// Copied 2021-02-12 from http://www.cbrepository.com/codes/code/11/
// Created 2011-04-09 by KilledWhale
// Modifications: Made the function FVD compatible
Function CountWords2(a As String, c As String)
   Dim n, aa // Force Variable Declaration
   
   Repeat
	  n + 1 // Kasvatetaan arvoa, että montako ON löydetty
	  aa = InStr(a, c, aa + 1) // Katsotaan löytyykö erotinta
	  If Not aa Then // Jos ei löydy
		 Exit // Poistutaan
	  EndIf
   Forever
   Return n // Palautetaan esiintymien määrä
EndFunction
